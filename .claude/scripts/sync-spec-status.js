//.claude/scripts/sync-spec-status.js
const fs = require('fs');
const glob = require('glob');
const yaml = require('js-yaml');

function syncSpecStatus() {
    // 1. Scan all individual spec files
    const specFiles = glob.sync('specs/**/*.md');
    const statusData = {
        lastUpdated: new Date().toISOString(),
        sections: {}
    };
    
    specFiles.forEach(file => {
        const content = fs.readFileSync(file, 'utf8');
        
        // Extract status from individual spec
        const status = extractSpecStatus(content);
        const section = getSection(file); // 01-foundation, 02-core-flow, etc.
        
        if (!statusData.sections[section]) {
            statusData.sections[section] = [];
        }
        
        statusData.sections[section].push({
            file: file,
            spec: getSpecName(file),
            status: status.overall,
            completed: status.completedCriteria,
            total: status.totalCriteria,
            lastModified: fs.statSync(file).mtime
        });
    });
    
    // 2. Auto-generate master status file
    generateMasterStatus(statusData);
}

function extractSpecStatus(content) {
    // Parse acceptance criteria checkboxes
    const criteriaRegex = /- \[([ x])\]/g;
    const matches = [...content.matchAll(criteriaRegex)];
    
    const completed = matches.filter(m => m[1] === 'x').length;
    const total = matches.length;
    
    let overall = '🔴'; // Not Started
    if (completed > 0 && completed < total) overall = '🟡'; // In Progress  
    if (completed === total && total > 0) overall = '🟢'; // Complete
    
    return { overall, completedCriteria: completed, totalCriteria: total };
}

function getSection(file) {
    // Extract section from file path (e.g., "01-foundation" from "specs/01-foundation/01.1-setup.md")
    const match = file.match(/specs\/(\d+-[^\/]+)/);
    return match ? match[1] : 'other';
}

function getSpecName(file) {
    // Extract spec name from filename
    const match = file.match(/([^\/]+)\.md$/);
    return match ? match[1] : 'unknown';
}

function generateSectionStatus(sections) {
    let output = '';
    
    for (const [sectionName, specs] of Object.entries(sections)) {
        output += `\n## ${sectionName}\n\n`;
        specs.forEach(spec => {
            output += `- ${spec.status} **${spec.spec}** (${spec.completed}/${spec.total} criteria)\n`;
        });
    }
    
    return output;
}

function generateMasterStatus(data) {
    // Auto-generate the specs/status.md file
    const template = `
# Feature Specifications Status
**Last Updated**: ${data.lastUpdated} (Auto-generated)
**🤖 This file is automatically generated from individual spec files**

${generateSectionStatus(data.sections)}

---

## Auto-Sync Instructions
To update status:
1. ✅ Update acceptance criteria checkboxes in individual spec files
2. 🤖 Run \`npm run sync-status\` to regenerate this master file
3. 📝 Add notes manually in individual spec files if needed
`;
    
    fs.writeFileSync('specs/status.md', template);
}

// Export the main function
module.exports = { syncSpecStatus };

// Run if called directly
if (require.main === module) {
    syncSpecStatus();
}